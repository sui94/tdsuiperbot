import ccxt
import numpy as np
import pandas as pd
import asyncio
import logging
import re
import os
from telegram import Bot
from telegram.ext import Application, CommandHandler, ContextTypes
from datetime import datetime, timedelta

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ò–º–ø–æ—Ä—Ç—ã –¥–ª—è —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤
from ta.momentum import RSIIndicator
from ta.volatility import BollingerBands

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
TELEGRAM_TOKEN = os.getenv('TELEGRAM_TOKEN')
if not TELEGRAM_TOKEN:
    TELEGRAM_TOKEN = "8225140718:AAFcS16jDoGghYGj0_ued-zz1CURAyOcCCo"  # –î–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è

EXCHANGE = ccxt.binance()
TIMEFRAME = '1h'

def escape_markdown(text):
    """–≠–∫—Ä–∞–Ω–∏—Ä—É–µ—Ç —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã –¥–ª—è Markdown"""
    escape_chars = r'_*[]()~`>#+-=|{}.!'
    return re.sub(r'([%s])' % re.escape(escape_chars), r'\\\1', text)

def get_signals(hours_back=4):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–∏–≥–Ω–∞–ª—ã RSI + BB –∑–∞ –ø—Ä–æ—à–µ–¥—à–∏–µ hours_back —á–∞—Å–æ–≤."""
    signals = []
    signal_cache = set()
    
    try:
        logger.info(f"–ó–∞–≥—Ä—É–∂–∞—é —Ä—ã–Ω–∫–∏... –ê–Ω–∞–ª–∏–∑ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ {hours_back} —á–∞—Å–∞(–æ–≤)")
        markets = EXCHANGE.load_markets()
        symbols = [s for s in markets if s.endswith('/USDT') and '/UP/' not in s and '/DOWN/' not in s]
        logger.info(f"–ù–∞–π–¥–µ–Ω–æ {len(symbols)} USDT –ø–∞—Ä")
        
        # –°–æ–∑–¥–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø–∞—Ä —Å –æ–±—ä–µ–º–∞–º–∏ –¥–ª—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏
        symbols_with_volume = []
        for symbol in symbols:
            try:
                ticker = EXCHANGE.fetch_ticker(symbol)
                quote_volume = ticker.get('quoteVolume')
                if quote_volume is not None:
                    symbols_with_volume.append((symbol, quote_volume))
            except Exception as e:
                continue
        
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –æ–±—ä–µ–º—É (–ø–æ —É–±—ã–≤–∞–Ω–∏—é) –∏ –±–µ—Ä–µ–º –ø–µ—Ä–≤—ã–µ 50
        symbols_with_volume.sort(key=lambda x: x[1], reverse=True)
        top_50_symbols = [symbol for symbol, volume in symbols_with_volume[:50]]
        
        logger.info(f"–ê–Ω–∞–ª–∏–∑–∏—Ä—É—é —Ç–æ–ø 50 –ø–∞—Ä –ø–æ –æ–±—ä–µ–º—É –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ {hours_back} —á–∞—Å–∞(–æ–≤)")
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç–æ–ø 50 –ø–∞—Ä
        for i, symbol in enumerate(top_50_symbols):
            try:
                if i % 10 == 0:
                    logger.info(f"–ê–Ω–∞–ª–∏–∑ {i+1}/{len(top_50_symbols)}: {symbol}")
                    
                candles_needed = max(hours_back + 50, 150)
                candles = EXCHANGE.fetch_ohlcv(symbol, TIMEFRAME, limit=candles_needed)
                
                if len(candles) < max(hours_back + 20, 50):
                    continue
                
                timestamps = [c[0] for c in candles]
                opens = [c[1] for c in candles]
                highs = [c[2] for c in candles]
                lows = [c[3] for c in candles]
                closes = [c[4] for c in candles]
                
                close_series = pd.Series(closes)
                
                rsi_indicator = RSIIndicator(close=close_series, window=14)
                rsi_series = rsi_indicator.rsi()
                
                bb = BollingerBands(close=close_series, window=20, window_dev=2)
                upper_series = bb.bollinger_hband()
                lower_series = bb.bollinger_lband()
                
                if len(rsi_series) < 10 or len(upper_series) < 10 or len(lower_series) < 10:
                    continue
                
                current_time = timestamps[-1]
                start_analysis_time = current_time - (hours_back * 60 * 60 * 1000)
                
                start_index = max(30, len(candles) - hours_back - 20)
                end_index = len(candles) - 1
                
                for idx in range(start_index, end_index + 1):
                    if timestamps[idx] < start_analysis_time:
                        continue
                    
                    current_open = opens[idx]
                    current_high = highs[idx]
                    current_low = lows[idx]
                    current_close = closes[idx]
                    current_timestamp = timestamps[idx]
                    
                    if (idx >= len(rsi_series) or idx >= len(upper_series) or idx >= len(lower_series) or
                        pd.isna(rsi_series.iloc[idx]) or pd.isna(upper_series.iloc[idx]) or pd.isna(lower_series.iloc[idx])):
                        continue
                    
                    current_rsi = float(rsi_series.iloc[idx])
                    current_upper = float(upper_series.iloc[idx])
                    current_lower = float(lower_series.iloc[idx])
                    
                    is_oversold = (current_rsi < 30) and (current_low <= current_lower) and (current_close > current_lower)
                    is_overbought = (current_rsi > 70) and (current_high >= current_upper) and (current_close < current_upper)
                    
                    if is_oversold or is_overbought:
                        signal_key = f"{symbol}_{current_timestamp}_{ 'oversold' if is_oversold else 'overbought' }"
                        if signal_key in signal_cache:
                            continue
                        signal_cache.add(signal_key)
                        
                        signal_type = "üìâ –ü–µ—Ä–µ–ø—Ä–æ–¥–∞–Ω–Ω–æ—Å—Ç—å (–∫–∞—Å–∞–Ω–∏–µ —Ç–µ–Ω—å—é)" if is_oversold else "üìà –ü–µ—Ä–µ–∫—É–ø–ª–µ–Ω–Ω–æ—Å—Ç—å (–∫–∞—Å–∞–Ω–∏–µ —Ç–µ–Ω—å—é)"
                        signal_time = datetime.fromtimestamp(current_timestamp/1000).strftime('%m-%d %H:%M')
                        
                        escaped_symbol = escape_markdown(symbol)
                        
                        signals.append(
                            f"{signal_type}: *{escaped_symbol}*\n"
                            f"- RSI: {current_rsi:.2f}\n"
                            f"- –¶–µ–Ω–∞: {current_close:.4f}\n"
                            f"- –í—Ä–µ–º—è: {signal_time}\n"
                        )
                        
                        logger.info(f"–ù–∞–π–¥–µ–Ω —Å–∏–≥–Ω–∞–ª: {symbol} - {signal_type} - RSI: {current_rsi:.2f}")

            except Exception as e:
                logger.warning(f"–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ {symbol}: {e}")
                continue

    except Exception as e:
        logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ get_signals: {e}")

    logger.info(f"–ê–Ω–∞–ª–∏–∑ –∑–∞ {hours_back} —á–∞—Å–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω. –ù–∞–π–¥–µ–Ω–æ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤: {len(signals)}")
    return signals

async def start_command(update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start."""
    user_name = update.effective_user.username or update.effective_user.first_name
    logger.info(f"–ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ /start –æ—Ç {user_name}")
    await update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç! –Ø —Ç–æ—Ä–≥–æ–≤—ã–π –±–æ—Ç —Å —Ä–∞–∑–ª–∏—á–Ω—ã–º–∏ –ø–µ—Ä–∏–æ–¥–∞–º–∏ –∞–Ω–∞–ª–∏–∑–∞:\n"
        "/scan4 - —Å–∏–≥–Ω–∞–ª—ã –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 4 —á–∞—Å–∞\n"
        "/scan10 - —Å–∏–≥–Ω–∞–ª—ã –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 10 —á–∞—Å–æ–≤\n"
        "/scan24 - —Å–∏–≥–Ω–∞–ª—ã –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞"
    )

async def scan_specific_command(update, context: ContextTypes.DEFAULT_TYPE, hours=4):
    """–û–±—â–∏–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–æ–º–∞–Ω–¥ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è."""
    user_name = update.effective_user.username or update.effective_user.first_name
    command = update.message.text.lower()
    
    logger.info(f"–ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ {command} –æ—Ç {user_name}")
    
    try:
        await update.message.reply_text(f"üîç –ò—â—É —Ç–æ—Ä–≥–æ–≤—ã–µ —Å–∏–≥–Ω–∞–ª—ã —Å –∫–∞—Å–∞–Ω–∏–µ–º —Ç–µ–Ω—å—é –≤ —Ç–æ–ø 50 –ø–∞—Ä –ø–æ –æ–±—ä–µ–º—É –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ {hours} —á–∞—Å–∞(–æ–≤), –ø–æ–¥–æ–∂–¥–∏—Ç–µ...")
        
        signals = get_signals(hours)
        
        if signals:
            display_signals = signals[:20]
            message = (
                f"üîî *–ù–∞–π–¥–µ–Ω–æ {len(signals)} —Å–∏–≥–Ω–∞–ª–æ–≤ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ {hours} —á–∞—Å–∞(–æ–≤)* (–ø–æ–∫–∞–∑–∞–Ω—ã –ø–µ—Ä–≤—ã–µ {len(display_signals)}):\n\n" +
                "\n".join(display_signals)
            )
        else:
            message = f"‚ùé –°–∏–≥–Ω–∞–ª–æ–≤ —Å –∫–∞—Å–∞–Ω–∏–µ–º —Ç–µ–Ω—å—é –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ {hours} —á–∞—Å–∞(–æ–≤). –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        
        await update.message.reply_text(message, parse_mode='Markdown')
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ scan_command: {e}")
        await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

async def scan4_command(update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /scan4."""
    await scan_specific_command(update, context, 4)

async def scan10_command(update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /scan10."""
    await scan_specific_command(update, context, 10)

async def scan24_command(update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /scan24."""
    await scan_specific_command(update, context, 24)

def main():
    try:
        application = Application.builder().token(TELEGRAM_TOKEN).build()
        
        # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –∫–æ–º–∞–Ω–¥
        application.add_handler(CommandHandler('start', start_command))
        application.add_handler(CommandHandler('scan4', scan4_command))
        application.add_handler(CommandHandler('scan10', scan10_command))
        application.add_handler(CommandHandler('scan24', scan24_command))
        
        # –¢–∞–∫–∂–µ –¥–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–æ–º–∞–Ω–¥—ã /scan (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 4 —á–∞—Å–∞)
        application.add_handler(CommandHandler('scan', scan4_command))
        
        logger.info("üöÄ –ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω! –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã: /scan4, /scan10, /scan24")
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è run_polling
        application.run_polling(allowed_updates=None)
        
    except Exception as e:
        logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞: {e}")

if __name__ == "__main__":
    main()import ccxt
import numpy as np
import pandas as pd
import asyncio
import logging
import re
import os
import threading
import time
from http.server import HTTPServer, BaseHTTPRequestHandler
from telegram import Bot
from telegram.ext import Application, CommandHandler, ContextTypes
from datetime import datetime, timedelta

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ò–º–ø–æ—Ä—Ç—ã –¥–ª—è —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤
from ta.momentum import RSIIndicator
from ta.volatility import BollingerBands

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
TELEGRAM_TOKEN = os.getenv('TELEGRAM_TOKEN')
if not TELEGRAM_TOKEN:
    TELEGRAM_TOKEN = "8225140718:AAFcS16jDoGghYGj0_ued-zz1CURAyOcCCo"  # –î–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è

EXCHANGE = ccxt.binance()
TIMEFRAME = '1h'

# –§–∏–∫—Ç–∏–≤–Ω—ã–π –≤–µ–±-—Å–µ—Ä–≤–µ—Ä –¥–ª—è Render
class HealthHandler(BaseHTTPRequestHandler):
    def do_GET(self):
        self.send_response(200)
        self.send_header('Content-type', 'text/plain; charset=utf-8')
        self.end_headers()
        self.wfile.write(b'Bot is running! Trading signals bot for Telegram.')

def start_health_server():
    """–ó–∞–ø—É—Å–∫ —Ñ–∏–∫—Ç–∏–≤–Ω–æ–≥–æ –≤–µ–±-—Å–µ—Ä–≤–µ—Ä–∞ –¥–ª—è Render"""
    try:
        port = int(os.environ.get('PORT', 10000))
        server = HTTPServer(('0.0.0.0', port), HealthHandler)
        server_thread = threading.Thread(target=server.serve_forever)
        server_thread.daemon = True
        server_thread.start()
        logger.info(f"Health server started on port {port}")
        return server
    except Exception as e:
        logger.error(f"Failed to start health server: {e}")
        return None

def escape_markdown(text):
    """–≠–∫—Ä–∞–Ω–∏—Ä—É–µ—Ç —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã –¥–ª—è Markdown"""
    escape_chars = r'_*[]()~`>#+-=|{}.!'
    return re.sub(r'([%s])' % re.escape(escape_chars), r'\\\1', text)

def get_signals(hours_back=4):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–∏–≥–Ω–∞–ª—ã RSI + BB –∑–∞ –ø—Ä–æ—à–µ–¥—à–∏–µ hours_back —á–∞—Å–æ–≤."""
    signals = []
    signal_cache = set()
    
    try:
        logger.info(f"–ó–∞–≥—Ä—É–∂–∞—é —Ä—ã–Ω–∫–∏... –ê–Ω–∞–ª–∏–∑ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ {hours_back} —á–∞—Å–∞(–æ–≤)")
        markets = EXCHANGE.load_markets()
        symbols = [s for s in markets if s.endswith('/USDT') and '/UP/' not in s and '/DOWN/' not in s]
        logger.info(f"–ù–∞–π–¥–µ–Ω–æ {len(symbols)} USDT –ø–∞—Ä")
        
        # –°–æ–∑–¥–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø–∞—Ä —Å –æ–±—ä–µ–º–∞–º–∏ –¥–ª—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏
        symbols_with_volume = []
        for symbol in symbols:
            try:
                ticker = EXCHANGE.fetch_ticker(symbol)
                quote_volume = ticker.get('quoteVolume')
                if quote_volume is not None:
                    symbols_with_volume.append((symbol, quote_volume))
            except Exception as e:
                continue
        
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –æ–±—ä–µ–º—É (–ø–æ —É–±—ã–≤–∞–Ω–∏—é) –∏ –±–µ—Ä–µ–º –ø–µ—Ä–≤—ã–µ 50
        symbols_with_volume.sort(key=lambda x: x[1], reverse=True)
        top_50_symbols = [symbol for symbol, volume in symbols_with_volume[:50]]
        
        logger.info(f"–ê–Ω–∞–ª–∏–∑–∏—Ä—É—é —Ç–æ–ø 50 –ø–∞—Ä –ø–æ –æ–±—ä–µ–º—É –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ {hours_back} —á–∞—Å–∞(–æ–≤)")
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç–æ–ø 50 –ø–∞—Ä
        for i, symbol in enumerate(top_50_symbols):
            try:
                if i % 10 == 0:
                    logger.info(f"–ê–Ω–∞–ª–∏–∑ {i+1}/{len(top_50_symbols)}: {symbol}")
                    
                candles_needed = max(hours_back + 50, 150)
                candles = EXCHANGE.fetch_ohlcv(symbol, TIMEFRAME, limit=candles_needed)
                
                if len(candles) < max(hours_back + 20, 50):
                    continue
                
                timestamps = [c[0] for c in candles]
                opens = [c[1] for c in candles]
                highs = [c[2] for c in candles]
                lows = [c[3] for c in candles]
                closes = [c[4] for c in candles]
                
                close_series = pd.Series(closes)
                
                rsi_indicator = RSIIndicator(close=close_series, window=14)
                rsi_series = rsi_indicator.rsi()
                
                bb = BollingerBands(close=close_series, window=20, window_dev=2)
                upper_series = bb.bollinger_hband()
                lower_series = bb.bollinger_lband()
                
                if len(rsi_series) < 10 or len(upper_series) < 10 or len(lower_series) < 10:
                    continue
                
                current_time = timestamps[-1]
                start_analysis_time = current_time - (hours_back * 60 * 60 * 1000)
                
                start_index = max(30, len(candles) - hours_back - 20)
                end_index = len(candles) - 1
                
                for idx in range(start_index, end_index + 1):
                    if timestamps[idx] < start_analysis_time:
                        continue
                    
                    current_open = opens[idx]
                    current_high = highs[idx]
                    current_low = lows[idx]
                    current_close = closes[idx]
                    current_timestamp = timestamps[idx]
                    
                    if (idx >= len(rsi_series) or idx >= len(upper_series) or idx >= len(lower_series) or
                        pd.isna(rsi_series.iloc[idx]) or pd.isna(upper_series.iloc[idx]) or pd.isna(lower_series.iloc[idx])):
                        continue
                    
                    current_rsi = float(rsi_series.iloc[idx])
                    current_upper = float(upper_series.iloc[idx])
                    current_lower = float(lower_series.iloc[idx])
                    
                    is_oversold = (current_rsi < 30) and (current_low <= current_lower) and (current_close > current_lower)
                    is_overbought = (current_rsi > 70) and (current_high >= current_upper) and (current_close < current_upper)
                    
                    if is_oversold or is_overbought:
                        signal_key = f"{symbol}_{current_timestamp}_{ 'oversold' if is_oversold else 'overbought' }"
                        if signal_key in signal_cache:
                            continue
                        signal_cache.add(signal_key)
                        
                        signal_type = "üìâ –ü–µ—Ä–µ–ø—Ä–æ–¥–∞–Ω–Ω–æ—Å—Ç—å (–∫–∞—Å–∞–Ω–∏–µ —Ç–µ–Ω—å—é)" if is_oversold else "üìà –ü–µ—Ä–µ–∫—É–ø–ª–µ–Ω–Ω–æ—Å—Ç—å (–∫–∞—Å–∞–Ω–∏–µ —Ç–µ–Ω—å—é)"
                        signal_time = datetime.fromtimestamp(current_timestamp/1000).strftime('%m-%d %H:%M')
                        
                        escaped_symbol = escape_markdown(symbol)
                        
                        signals.append(
                            f"{signal_type}: *{escaped_symbol}*\n"
                            f"- RSI: {current_rsi:.2f}\n"
                            f"- –¶–µ–Ω–∞: {current_close:.4f}\n"
                            f"- –í—Ä–µ–º—è: {signal_time}\n"
                        )
                        
                        logger.info(f"–ù–∞–π–¥–µ–Ω —Å–∏–≥–Ω–∞–ª: {symbol} - {signal_type} - RSI: {current_rsi:.2f}")

            except Exception as e:
                logger.warning(f"–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ {symbol}: {e}")
                continue

    except Exception as e:
        logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ get_signals: {e}")

    logger.info(f"–ê–Ω–∞–ª–∏–∑ –∑–∞ {hours_back} —á–∞—Å–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω. –ù–∞–π–¥–µ–Ω–æ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤: {len(signals)}")
    return signals

async def start_command(update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start."""
    user_name = update.effective_user.username or update.effective_user.first_name
    logger.info(f"–ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ /start –æ—Ç {user_name}")
    await update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç! –Ø —Ç–æ—Ä–≥–æ–≤—ã–π –±–æ—Ç —Å —Ä–∞–∑–ª–∏—á–Ω—ã–º–∏ –ø–µ—Ä–∏–æ–¥–∞–º–∏ –∞–Ω–∞–ª–∏–∑–∞:\n"
        "/scan4 - —Å–∏–≥–Ω–∞–ª—ã –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 4 —á–∞—Å–∞\n"
        "/scan10 - —Å–∏–≥–Ω–∞–ª—ã –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 10 —á–∞—Å–æ–≤\n"
        "/scan24 - —Å–∏–≥–Ω–∞–ª—ã –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞"
    )

async def scan_specific_command(update, context: ContextTypes.DEFAULT_TYPE, hours=4):
    """–û–±—â–∏–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–æ–º–∞–Ω–¥ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è."""
    user_name = update.effective_user.username or update.effective_user.first_name
    command = update.message.text.lower()
    
    logger.info(f"–ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ {command} –æ—Ç {user_name}")
    
    try:
        await update.message.reply_text(f"üîç –ò—â—É —Ç–æ—Ä–≥–æ–≤—ã–µ —Å–∏–≥–Ω–∞–ª—ã —Å –∫–∞—Å–∞–Ω–∏–µ–º —Ç–µ–Ω—å—é –≤ —Ç–æ–ø 50 –ø–∞—Ä –ø–æ –æ–±—ä–µ–º—É –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ {hours} —á–∞—Å–∞(–æ–≤), –ø–æ–¥–æ–∂–¥–∏—Ç–µ...")
        
        signals = get_signals(hours)
        
        if signals:
            display_signals = signals[:20]
            message = (
                f"üîî *–ù–∞–π–¥–µ–Ω–æ {len(signals)} —Å–∏–≥–Ω–∞–ª–æ–≤ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ {hours} —á–∞—Å–∞(–æ–≤)* (–ø–æ–∫–∞–∑–∞–Ω—ã –ø–µ—Ä–≤—ã–µ {len(display_signals)}):\n\n" +
                "\n".join(display_signals)
            )
        else:
            message = f"‚ùé –°–∏–≥–Ω–∞–ª–æ–≤ —Å –∫–∞—Å–∞–Ω–∏–µ–º —Ç–µ–Ω—å—é –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ {hours} —á–∞—Å–∞(–æ–≤). –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        
        await update.message.reply_text(message, parse_mode='Markdown')
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ scan_command: {e}")
        await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

async def scan4_command(update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /scan4."""
    await scan_specific_command(update, context, 4)

async def scan10_command(update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /scan10."""
    await scan_specific_command(update, context, 10)

async def scan24_command(update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /scan24."""
    await scan_specific_command(update, context, 24)

def run_bot():
    """–ó–∞–ø—É—Å–∫ Telegram –±–æ—Ç–∞"""
    try:
        application = Application.builder().token(TELEGRAM_TOKEN).build()
        
        # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –∫–æ–º–∞–Ω–¥
        application.add_handler(CommandHandler('start', start_command))
        application.add_handler(CommandHandler('scan4', scan4_command))
        application.add_handler(CommandHandler('scan10', scan10_command))
        application.add_handler(CommandHandler('scan24', scan24_command))
        
        # –¢–∞–∫–∂–µ –¥–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–æ–º–∞–Ω–¥—ã /scan (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 4 —á–∞—Å–∞)
        application.add_handler(CommandHandler('scan', scan4_command))
        
        logger.info("üöÄ –ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω! –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã: /scan4, /scan10, /scan24")
        
        # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
        application.run_polling(allowed_updates=None)
        
    except Exception as e:
        logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞: {e}")

def main():
    # –ó–∞–ø—É—Å–∫ —Ñ–∏–∫—Ç–∏–≤–Ω–æ–≥–æ –≤–µ–±-—Å–µ—Ä–≤–µ—Ä–∞ –¥–ª—è Render
    health_server = start_health_server()
    
    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
    bot_thread = threading.Thread(target=run_bot)
    bot_thread.daemon = True
    bot_thread.start()
    
    logger.info("–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∑–∞–ø—É—â–µ–Ω–æ. –í–µ–±-—Å–µ—Ä–≤–µ—Ä –∏ –±–æ—Ç —Ä–∞–±–æ—Ç–∞—é—Ç.")
    
    # –î–µ—Ä–∂–∏–º –æ—Å–Ω–æ–≤–Ω–æ–π –ø–æ—Ç–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã–º
    try:
        while True:
            time.sleep(1)
    except KeyboardInterrupt:
        logger.info("–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")

if __name__ == "__main__":
    main()